# Enriched Prompts for Different LLM Tasks, Generated by Ai

def get_summarization_prompt(text: str) -> str:
    """Enhanced prompt for text summarization"""
    return f"""Please provide a clear and concise summary of the following text. 
Focus on the main points and key information. Keep the summary between 2-3 sentences.

Text to summarize:
{text}

Summary:"""

def get_sentiment_analysis_prompt(text: str) -> str:
    """Enhanced prompt for sentiment analysis"""
    return f"""Analyze the sentiment of the following text. Provide your response in this exact format:

Sentiment: [positive/negative/neutral]
Confidence Score: [0.0-1.0]
Reasoning: [Brief explanation of why you classified it this way]

Text to analyze:
"{text}"

Analysis:"""


def get_language_detection_prompt(text: str) -> str:
    """Enhanced prompt for language detection and analysis"""
    return f"""Analyze the following text and detect its language. Provide detailed language analysis.

Text to analyze:
"{text}"

Provide your response in this exact format:
Primary Language: [language name]
Language Code: [ISO 639-1 code]
Confidence: [0.0-1.0]
Secondary Languages: [if any mixed languages detected]
Script Type: [Latin, Cyrillic, Arabic, etc.]
Text Direction: [Left-to-right, Right-to-left]
Cultural Context: [Brief note about regional dialect or variation if applicable]
Translation Needed: [Yes/No - if text contains non-English content]

Analysis:"""



def get_writing_style_analysis_prompt(text: str) -> str:
    """Enhanced prompt for writing style analysis"""
    return f"""Analyze the writing style of the following text comprehensively.

Text to analyze:
"{text}"

Provide your analysis in this exact format:
Formality Level: [very formal/formal/neutral/informal/very informal]
Complexity Score: [1-10, where 1 is very simple, 10 is very complex]
Tone: [professional, casual, academic, conversational, authoritative, etc.]
Voice: [active/passive - percentage breakdown]
Sentence Structure: [simple/compound/complex - dominant type]
Vocabulary Level: [elementary/intermediate/advanced/expert]
Reading Level: [estimated grade level]
Writing Purpose: [informative/persuasive/narrative/descriptive/expository]
Target Audience: [general public/experts/students/professionals]
Literary Devices: [metaphors, similes, alliteration, etc. if present]
Punctuation Style: [minimal/standard/elaborate]
Paragraph Structure: [short/medium/long paragraphs - typical length]

Style Characteristics:
- Sentence Length: [average words per sentence]
- Word Choice: [simple/sophisticated/technical/colloquial]
- Flow: [choppy/smooth/varied]
- Clarity: [very clear/clear/unclear/confusing]

Analysis:"""

def get_text_statistics_prompt(text: str) -> str:
    """Enhanced prompt for text statistics and readability analysis"""
    return f"""Analyze the following text and provide comprehensive statistics and readability scores.

Text to analyze:
"{text}"

Provide your analysis in this exact format:
BASIC STATISTICS:
Word Count: [total words]
Character Count: [with spaces]
Character Count (no spaces): [without spaces]
Sentence Count: [total sentences]
Paragraph Count: [total paragraphs]
Average Words per Sentence: [calculated average]
Average Characters per Word: [calculated average]

READABILITY SCORES:
Flesch Reading Ease: [0-100 scale with interpretation]
Flesch-Kincaid Grade Level: [grade level]
Estimated Reading Time: [minutes and seconds]
Complexity Rating: [simple/moderate/complex/very complex]

VOCABULARY ANALYSIS:
Unique Words: [count of unique words]
Vocabulary Richness: [unique words / total words ratio]
Most Frequent Words: [top 5 words with frequency]
Long Words (7+ chars): [count and percentage]
Short Words (1-3 chars): [count and percentage]

STRUCTURAL ANALYSIS:
Longest Sentence: [word count]
Shortest Sentence: [word count]
Average Paragraph Length: [sentences per paragraph]
Text Density: [words per paragraph]

LINGUISTIC FEATURES:
Question Marks: [count]
Exclamation Points: [count]
Numbers/Digits: [count]
Capitalized Words: [count excluding sentence starts]

Analysis:"""

def get_batch_processing_prompt(texts: list, analysis_type: str) -> str:
    """Enhanced prompt for batch processing multiple texts"""
    texts_formatted = "\n".join([f"Text {i+1}: {text}" for i, text in enumerate(texts)])
    
    return f"""Perform {analysis_type} analysis on the following batch of texts. Provide consistent analysis for each text.

Texts to analyze:
{texts_formatted}

For each text, provide analysis in this format:
TEXT [number]:
{analysis_type.upper()} ANALYSIS:
[Detailed analysis based on the type requested]

BATCH SUMMARY:
Overall Patterns: [common themes, styles, or sentiments across all texts]
Variations: [notable differences between texts]
Recommendations: [suggestions based on the batch analysis]

Analysis:"""



def get_comprehensive_analysis_prompt(text: str) -> str:
    """Enhanced prompt for comprehensive text analysis combining multiple features"""
    return f"""Perform a comprehensive analysis of the following text, combining multiple analytical approaches.

Text to analyze:
"{text}"

Provide complete analysis in this structured format:

=== LANGUAGE & DETECTION ===
Primary Language: [detected language]
Confidence: [0.0-1.0]
Mixed Languages: [if applicable]

=== SENTIMENT ANALYSIS ===
Overall Sentiment: [positive/negative/neutral/mixed]
Sentiment Score: [-1.0 to 1.0]
Emotional Tone: [specific emotions detected]
Intensity: [low/medium/high]

=== WRITING STYLE ===
Formality Level: [formal/informal scale]
Complexity: [1-10 scale]
Tone: [professional, casual, academic, etc.]
Target Audience: [estimated audience]

=== TEXT STATISTICS ===
Word Count: [count]
Readability Level: [grade level]
Vocabulary Richness: [assessment]
Sentence Complexity: [simple/complex]

=== KEY INSIGHTS ===
Main Themes: [2-3 key themes identified]
Notable Features: [unique characteristics]
Recommendations: [suggestions for improvement if applicable]
Use Cases: [where this text would be most effective]

=== SUMMARY SCORE ===
Overall Quality: [1-10 scale]
Clarity: [1-10 scale]
Engagement: [1-10 scale]
Effectiveness: [1-10 scale]

Analysis:"""
